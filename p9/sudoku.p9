set(arithmetic).
assign(max_models, -1).
assign(domain_size, 9).


formulas(latin_square).
all x all y1 all y2 (sudoku_map(x, y1) = sudoku_map(x, y2) -> y1 = y2).
all y all x1 all x2 (sudoku_map(x1, y) = sudoku_map(x2, y) -> x1 = x2).

square(sx, sy) <-> all n (n>=0 & n<9 -> exists x exists y (x >= sx & y >= sy & x < (sx + 3) & y < (sy + 3) & (sudoku_map(x, y) = n))).
end_of_list.


formulas(initial_state_sudoku).
% close world assumption -> cum fac sa declar ca nu trebuie sa se intample si pt celelalte cazuri?!
square(0, 0) & square(3, 0) & square(6, 0) &
square(0, 3) & square(3, 3) & square(6, 3) &
square(0, 6) & square(3, 6) & square(6, 6).


% https://en.wikipedia.org/wiki/Sudoku
sudoku_map(0, 0) = 4. sudoku_map(0, 1) = 2. sudoku_map(0, 4) = 6.
sudoku_map(1, 0) = 5. sudoku_map(1, 3) = 0. sudoku_map(1, 4) = 8. sudoku_map(1, 5) = 4.
sudoku_map(2, 1) = 8. sudoku_map(2, 2) = 7. sudoku_map(2, 7) = 5.

sudoku_map(3, 0) = 7. sudoku_map(3, 4) = 5. sudoku_map(3, 8) = 2.
sudoku_map(4, 0) = 3. sudoku_map(4, 3) = 7. sudoku_map(4, 5) = 2. sudoku_map(4, 8) = 0.
sudoku_map(5, 0) = 6. sudoku_map(5, 4) = 1. sudoku_map(5, 8) = 5.


sudoku_map(6, 1) = 5. sudoku_map(6, 6) = 1. sudoku_map(6, 7) = 7.
sudoku_map(7, 3) = 3. sudoku_map(7, 4) = 0. sudoku_map(7, 5) = 8. sudoku_map(7, 8) = 4.

sudoku_map(8, 4) = 7. sudoku_map(8, 7) = 6. sudoku_map(8, 8) = 8.

end_of_list.